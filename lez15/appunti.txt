lez15		()

################### SOLO SINGOLA C++

	|--|	|--|	|--|	|--|
	
	    |--|    |--|    |--|

	_____        ________      __	
	        ^				SPACE INVADERS
		 ^
		 ^
		|o|
	
###########################################

NOTA: domanda, se uso for( auto el : v) e la capacità di v è diversa dalla sua dimensione, el cicla fino alla fine della 
	dimensione o della capacità?


nel codice scritto nella lezione precedente (lez14), si è usata la funzione push_back() che aggiunge un elemento in coda
ad un vector. NON esiste un push_front, infatti avrebbero due sintassi molto diverse (dovrebbe creare un nuovo vettore e
spostare tutti gli elementi interni di un posto, scalando linearmente con il tempo)

si possono tuttavia, ovviamente, creare funzioni che facciano queste cose, ma impiegheranno tempo. esistono anche funzioni già date (insert) che però non sono molto perfomanti ovvero impegano potenzialmente molto tempo.

 container2.cpp (1)
___________________________________________________

#include<deque> //si legge deck e sta per double-end-queue
#include<iostream>
using namespace std;

int main(){
	deque<int> d = {1,2,3,4,5};
	d.push_front(0);	//per questo tipo di template (a doppia estremità), esiste la funzine pushfront

	cout << d.front() << " " << d.front() << endl;	//queste funzioni esistono anche in vector

	for( auto i : d) cout << i << " ";
	cout << endl;
}
____________________________________________________

	in generale il fatto è che lo standard mi dice che pushdfront e èpushback devono lavorare a tempo costante, e ciò è vero solo per le double end queue, e non per i vector. quindi pushfront esiste implementata solo per i deque
	per i vector avrebbe infatti complessità O(N) (di ordine N)

	- esiste anche list<> che è implementato come doubly-linked list (nell'header<list>)=

 container2.cpp (2)
______________________________________________________
#include<deque> //si legge deck e sta per double-end-queue
#include<list>
#include<iostream>
using namespace std;

int main(){
	deque<int> d = {1,2,3,4,5};
	d.push_front(0);	//per questo tipo di template (a doppia estremità), esiste la funzine pushfront

	cout << d.front() << " " << d.front() << endl; //queste funzioni esistono anche in vector

	for( auto i : d) cout << i << " ";
	cout << endl;

	list<int> l = {4,3,2,1};
	// l[3];	//NON funzione, list non fornice il "random access" perchè accedere al k-esimo elemento richiede
			//tempo O(k)
			
			
}
____________________________________________________

	il vantaggio delle liste sta nel fatto che permettono "insert" in tempo costante O(1)

	vediamo ora un ultimo container: gli array


 container2.cpp (3)
_______________________________________________________
#include<deque> //si legge deck e sta per double-end-queue
#include<list>
#include<iostream>
#include<array>
using namespace std;

int main(){
	deque<int> d = {1,2,3,4,5};
	d.push_front(0);	//per questo tipo di template (a doppia estremità), esiste la funzine pushfront

	cout << d.front() << " " << d.front() << endl; //queste funzioni esistono anche in vector

	for( auto i : d) cout << i << " ";
	cout << endl;

	list<int> l = {4,3,2,1};
	// cout << l[3] << endl;	//NON funzione, list non fornice il "random access" perchè accedere al k-esimo
					//elemento richiede tempo O(k)

	array<int,5>/*tipo,taglia*/ a;		//5 è un non-type template parameter
	array<int,8> b;			//sono due TIPI diversi			
			
}
____________________________________________________________________

	uso ora gli ITERATORI:

	iterator.cpp
_______________________________________________________________

#include<vector>
using namespace std;

//typedef double reale; //ridefinisco il tipo

int main(){

	vector<int> v = {1,2,3,4,5};

	vector<int>::iterator itv;	//devo specificare da dove prendo la definizione dell'iterator, che sta nel 
					//template su cui voglio usarlo
	it = v.begin();		//restituisce un iteratore al primo elemento di v

	//l'iteratore si comporta come un puntatore con qualche funzone in più, ma posso usarlo come un semplice puntat.

	cout << *itv << endl;

	//funzionano anche gli operatori []
	cout << itv[4] << endl;

	//funziona anche l'operatore ->

	list<int> l = {1,2,3,4,5};
	aut itl = l.begin();	//list<int>::iterator
	//cout << itl[4] << endl;	//NON funziona, perchè le liste non permettono il random access
	//funzionano anche operatori:  ->, ++, +
	// itl+4	//NON funziona, no random access
	// for(int i=0; i<e l++i	(brutobruto)
	
}
_________________________________________________________________

	cplusplus.com iterator (per informazioni sugli iteratori in c++)
 
	gli iteratori sono sostanzialmente dei puntatori agli elementi di un template di un certo tipo.

esercizio scemo per ciclare usando gli iteratori (prosegue dal programma di prima):
______________________________________________________________

	auto itl2 = l.end(); //in realtà begin() si posizione appena prima del primo elemento e legge ciò che c'è dopo
				//(ovvero il primo elemento), mentre end punta appena dopo l'ultimo valore,, ovvero
				// *itl2 mi mostra il primo elemento fuori dal mio vettore
	//cout << *itl2 << endl;	//folle!

	for( auto it = l.begin(); it < l.end(); it++){}
	//questo ciclo in realtà è meno efficiente del ciclo visto ieri "for(auto el : l)"
_______________________________________________________________































