Lez08	

######################### PRIMA PARTE (esercizi di mathematica)

-- esercizi sui polinomi di hermite
-- esercizi sull'oscillatore armonico

######################### SECONDA PARTE (esercizi di C++)

1-	scrivere una classe complex che abbia get/set in coordinate cartesiane e polari
	abbia funzioni di somma (anche con i reali), prodotto, inverso (1/z)
	discretizzazione (-2,2)^2
	stessa cosa per il cerchio unitario e la mappa z->1/(2z-3)

	scrivere su un file le coppie (x,y) di ogni punto in dcui viene mappato ogni punto del reticolo
	usare gnuplot




_____________________________________________________________


/*
    - E: scusa ma tra eduroam e sto pc non so chi vince 

*/

/*
    - E: Aloha
    - F: YEEEEEEEEEEEEEEE. Back in c++
    - F: Eccoci
    - F: Ti ricordi come ridefinire l'operatore + ?
    - E: no, ma possiamo recuperarlo da internet TNDS, qualcosa che aveva a che fare conuna funzione "double operator+ ()", ma lui vuole che usi "double somma(a,b) ", non correre :)
    - E: piu' che altro cosa cacchio e' una discretizzazione
    - F: http://labmaster.mi.infn.it/Laboratorio2/labTNDS/lectures_1112/lezione6.html
    - F: significa prendi qualche punto compreso in quella regione che ti ho dato e calcola l'immagine.
    - F: Al lavoro. Io scrivo get, set cartesiane
    - E: adesso metto il get polare
    - F: (y)
    - E: oddio non mi ricordo piu. arctan edo, arctan
    - F: contrario. no cazzata, giusto
    - E: come ieri ahahah
    - E: che ne dici di dichiarare solo le funzioni nella classe e poi definirle fuori?
    - F: Approved. Ho fatto somma, tu fai prodotto?
       - E: kk, devo solo ricordare :)
    - F: Io faccio inverso
    - E: niente, stupidata. siamo ala discretizzazione quindi
    - F: Yes, ho fixato un meno nel prodotto, giusto?
    - E: si che scemo, perÃ² guarda che quando definisci un complex le parentesi non servono.
    - E: quindi ora dobbiamo scrivere una funzione per disegnare il perimetro di un quadrato?
    - F: Anche dei punti interni. Dobbiamo prendere dei punti campione che siano un quadrato. 
    - E: per capire se spariamo il dentro in fuori o in dentro giusto? (belle parole)
    - F: Infatti non ho capito una sega: dobbiamo prendere dei punti complessi a caso e mapparli con quelle funzioni. Ora questi punti complessi che prendiamo devono essere dei punti di un quadrato. Faccio un esempio sotto
    - F: Packet loss op.
        
    - E: praticamente mi ha sdoppiato il testo e io devo scriver su quello sottostante... va beh. comunque se per il guardato disegnassimo perimetro e diagonali basterebbe? almeno sono"facili" da scrivere e danno un idea chiara. 
    
    - E: welcome back! e se invece che c++ tenessimo plain text come programming language? ok scrivo io:
    - E: ho notato come hai definito il costruttore, e effettivamente dobbiamo fare l'overloading del costruttore per quando vogliamo definire compel
    - F: ma se iniziassimo a cercare di compilare?
    - E: si potrebbe, manca solo una cosa scema che e' mettere in cout e poi dopo dirottare su un file con >
        edit: no, prova a compilare, ci serve una funzione stampa per stampare i complessi e la facciamo dopo
        
*/

    #include <iostream>
   #include <fstream> 
    using namespace std;
    
    class complex{
    private:
        double x_; //parte reale
        double y_; //parte immaginaria
    public:  
          complex();
          complex(double r, double i)
    {
        x_ = r;
        y_ = i;
    }
        ~complex()
        
        void set_cart( double a, double b );
        void set_re( double a ) { x_ = a; }
        double get_re () { return x_; }
        
        void set_im( double a ) { y_ = a; }
        double get_im () { return y_; }
        
        void set_pol( double r, double phi);
        
        double get_r() { return sqrt(x^2+y^2);}
        double get_phi() { return arctan(y/x);}
        
        complex sum(complex , complex);
        complex sum(complex  z1, double d);complex prodotto(complex, complex);
        complex inverso(complex );
 
            
    };
    
    void set_pol( double r, double phi) //set in polari
    {
        x_ = sqrt(x^2+y^2) * cos(phi);
        y_ = sqrt(x^2+y^2) * sin(phi);
    }
     
    void set_cart( double a, double b ) //set in cartesiane
    { 
        x_ = a; 
        y_ = b;
    }
       
    complex sum(complex  z1, complex  z2) //somma
    {
        complex r;
        r.set_re = z1.get_re + z2.get_re;
        r.set_im = z1.get_im + z2.get_im;
        
        return r;
    }   
    
    complex sum(complex  z1, double d) //somma
    {
        complex r;
        r.set_re = z1.get_re + d;
        r.set_im = z1.get_im;
        
        return r;
    }   
    
            
    
    complex complex::prodotto(complex x, complex y){
        complex z;
        
        z.set_re( x.get_re()*y.get_re() - x.get_im()*y.get_im());
        z.set_im( x.get_re()*y.get_im() + x.get_im()*y.get_re());
        
        return z;
    }
        
        complex inverso(complex z)
    {
        complex r;
        r.set_re = z.get_re / z.get_r;
        r.set_im = - z.get_im / z.get_r;
        
        return r;    
    }
        
    int main()
   {
       //a dopo header etc...
       
       ofstream out;
       out.open("quadrato.dat");
       
       complex p[100]; //prendiamo 100 punti guarda se ti convince come li metto
       for(int i = 0; i < 10; i++)
       {
           for(int k = 0: k < 10: k++)
            {
                
               

                p[i * 10 + k].set_re = 2 - i*0.4;
                p[i * 10 + k].set_im = 2 - k*0.4; 
                
                out << get_re(p[i * 10 + k]) << " " << get_im(p[i * 10 + k]) << endl;
            }
        }
        
        out.close();
        
        complex fp[100]; 
        
        out.open("fquadrato.dat");
        
        for(int i = 0; i < 100; i++)
        {
              fp[i] = prodotto(p[i], inverso( prodotto( sum (p[i], -3.), sum (p[i], -3.) )));
              out << get_re(fp[i]) << " " << get_im(fp[i]) << endl;      
        
        }  
        
        out.close();
        out.open("cerchio.dat");
        
        complex circ[91]
    
        for(int r=1; r<10; r++)
        
            for(int p=0; p<10; p++){
            
                circ[(r-1) * 10 + p].set_pol( 0.2 * r, PI/5 * p);
                out << get_re(circ[(r-1) * 10 + p]) << " " << get_im(circ[(r-1) * 10 + p]) << endl;
                
            }
            
         out.close();
         out.open("fcerchio.dat")   
            
         circ[90].set_pol(0,0);
         
         complex fcirc[91];
         for(int i=0; i<91; i++){
              fcirc[i] = inverso( somma( prodotto(circ[i], 2), -3) );
		 out << get_re(fcirc[i]) << " " << get_im(fcirc[i]) << endl; 
              
         }      
             
	out.close();

	return 0;
}             
____________________________________________________________       
